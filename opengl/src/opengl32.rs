use ::types::*;

#[link(name = "opengl32")]
extern "stdcall" {
    pub fn glAccum(op: GLenum, value: GLfloat);
    pub fn glAlphaFunc(func: GLenum, ref_: GLclampf);
    pub fn glAreTexturesResident(n: GLsizei, textures: *const GLuint, residences: *mut GLboolean) -> GLboolean;
    pub fn glArrayElement(i: GLint);
    pub fn glBegin(mode: GLenum);
    pub fn glBindTexture(target: GLenum, texture: GLuint);
    pub fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: *const GLubyte);
    pub fn glBlendFunc(sfactor: GLenum, dfactor: GLenum);
    pub fn glCallList(list: GLuint);
    pub fn glCallLists(n: GLsizei, type_: GLenum, lists: *const GLvoid);
    pub fn glClear(mask: GLbitfield);
    pub fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
    pub fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf);
    pub fn glClearDepth(depth: GLclampd);
    pub fn glClearIndex(c: GLfloat);
    pub fn glClearStencil(s: GLint);
    pub fn glClipPlane(plane: GLenum, equation: *const GLdouble);
    pub fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte);
    pub fn glColor3bv(v: *const GLbyte);
    pub fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble);
    pub fn glColor3dv(v: *const GLdouble);
    pub fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat);
    pub fn glColor3fv(v: *const GLfloat);
    pub fn glColor3i(red: GLint, green: GLint, blue: GLint);
    pub fn glColor3iv(v: *const GLint);
    pub fn glColor3s(red: GLshort, green: GLshort, blue: GLshort);
    pub fn glColor3sv(v: *const GLshort);
    pub fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte);
    pub fn glColor3ubv(v: *const GLubyte);
    pub fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint);
    pub fn glColor3uiv(v: *const GLuint);
    pub fn glColor3us(red: GLushort, green: GLushort, blue: GLushort);
    pub fn glColor3usv(v: *const GLushort);
    pub fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte);
    pub fn glColor4bv(v: *const GLbyte);
    pub fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble);
    pub fn glColor4dv(v: *const GLdouble);
    pub fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat);
    pub fn glColor4fv(v: *const GLfloat);
    pub fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint);
    pub fn glColor4iv(v: *const GLint);
    pub fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort);
    pub fn glColor4sv(v: *const GLshort);
    pub fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte);
    pub fn glColor4ubv(v: *const GLubyte);
    pub fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint);
    pub fn glColor4uiv(v: *const GLuint);
    pub fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort);
    pub fn glColor4usv(v: *const GLushort);
    pub fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean);
    pub fn glColorMaterial(face: GLenum, mode: GLenum);
    pub fn glColorPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
    pub fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, type_: GLenum);
    pub fn glCopyTexImage1D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint);
    pub fn glCopyTexImage2D(target: GLenum, level: GLint, internalFormat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint);
    pub fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei);
    pub fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    pub fn glCullFace(mode: GLenum);
    pub fn glDeleteLists(list: GLuint, range: GLsizei);
    pub fn glDeleteTextures(n: GLsizei, textures: *const GLuint);
    pub fn glDepthFunc(func: GLenum);
    pub fn glDepthMask(flag: GLboolean);
    pub fn glDepthRange (zNear: GLclampd, zFar: GLclampd);
    pub fn glDisable(cap: GLenum);
    pub fn glDisableClientState(array: GLenum);
    pub fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei);
    pub fn glDrawBuffer(mode: GLenum);
    pub fn glDrawElements(mode: GLenum, count: GLsizei, type_: GLenum, indices: *const GLvoid);
    pub fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const GLvoid);
    pub fn glEdgeFlag(flag: GLboolean);
    pub fn glEdgeFlagPointer(stride: GLsizei, pointer: *const GLvoid);
    pub fn glEdgeFlagv(flag: *const GLboolean);
    pub fn glEnable(cap: GLenum);
    pub fn glEnableClientState(array: GLenum);
    pub fn glEnd();
    pub fn glEndList();
    pub fn glEvalCoord1d(u: GLdouble);
    pub fn glEvalCoord1dv(u: *const GLdouble);
    pub fn glEvalCoord1f(u: GLfloat);
    pub fn glEvalCoord1fv(u: *const GLfloat);
    pub fn glEvalCoord2d(u: GLdouble, v: GLdouble);
    pub fn glEvalCoord2dv(u: *const GLdouble);
    pub fn glEvalCoord2f(u: GLfloat, v: GLfloat);
    pub fn glEvalCoord2fv(u: *const GLfloat);
    pub fn glEvalMesh1(mode: GLenum, i1: GLint, i2: GLint);
    pub fn glEvalMesh2(mode: GLenum, i1: GLint, i2: GLint, j1: GLint, j2: GLint);
    pub fn glEvalPoint1(i: GLint);
    pub fn glEvalPoint2(i: GLint, j: GLint);
    pub fn glFeedbackBuffer(size: GLsizei, type_: GLenum, buffer: *mut GLfloat);
    pub fn glFinish();
    pub fn glFlush();
    pub fn glFogf(pname: GLenum, param: GLfloat);
    pub fn glFogfv(pname: GLenum, params: *const GLfloat);
    pub fn glFogi(pname: GLenum, param: GLint);
    pub fn glFogiv(pname: GLenum, params: *const GLint);
    pub fn glFrontFace(mode: GLenum);
    pub fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble);
    pub fn glGenLists(range: GLsizei) -> GLuint;
    pub fn glGenTextures(n: GLsizei, textures: *mut GLuint);
    pub fn glGetBooleanv(pname: GLenum, params: *mut GLboolean);
    pub fn glGetClipPlane(plane: GLenum, equation: *mut GLdouble);
    pub fn glGetDoublev(pname: GLenum, params: *mut GLdouble);
    pub fn glGetError() -> GLenum;
    pub fn glGetFloatv(pname: GLenum, params: *mut GLfloat);
    pub fn glGetIntegerv(pname: GLenum, params: *mut GLint);
    pub fn glGetLightfv(light: GLenum, pname: GLenum, params: *mut GLfloat);
    pub fn glGetLightiv(light: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glGetMapdv(target: GLenum, query: GLenum, v: *mut GLdouble);
    pub fn glGetMapfv(target: GLenum, query: GLenum, v: *mut GLfloat);
    pub fn glGetMapiv(target: GLenum, query: GLenum, v: *mut GLint);
    pub fn glGetMaterialfv(face: GLenum, pname: GLenum, params: *mut GLfloat);
    pub fn glGetMaterialiv(face: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glGetPixelMapfv(map: GLenum, values: *mut GLfloat);
    pub fn glGetPixelMapuiv(map: GLenum, values: *mut GLuint);
    pub fn glGetPixelMapusv(map: GLenum, values: *mut GLushort);
    pub fn glGetPointerv(pname: GLenum, params: *mut GLvoid);
    pub fn glGetPolygonStipple( mask: *mut GLubyte);
    pub fn glGetString(name: GLenum) -> *const GLubyte;
    pub fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
    pub fn glGetTexEnviv(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glGetTexGendv(coord: GLenum, pname: GLenum, params: *mut GLdouble);
    pub fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: *mut GLfloat);
    pub fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, type_: GLenum, pixels: *mut GLvoid);
    pub fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLfloat);
    pub fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: *mut GLint);
    pub fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: *mut GLfloat);
    pub fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: *mut GLint);
    pub fn glHint(target: GLenum, mode: GLenum);
    pub fn glIndexMask(mask: GLuint);
    pub fn glIndexPointer(type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
    pub fn glIndexd(c: GLdouble);
    pub fn glIndexdv(c: *const GLdouble);
    pub fn glIndexf(c: GLfloat);
    pub fn glIndexfv(c: *const GLfloat);
    pub fn glIndexi(c: GLint);
    pub fn glIndexiv(c: *const GLint);
    pub fn glIndexs(c: GLshort);
    pub fn glIndexsv(c: *const GLshort);
    pub fn glIndexub(c: GLubyte);
    pub fn glIndexubv(c: *const GLubyte);
    pub fn glInitNames();
    pub fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: *const GLvoid);
    pub fn glIsEnabled(cap: GLenum) -> GLboolean;
    pub fn glIsList(list: GLuint) -> GLboolean;
    pub fn glIsTexture(texture: GLuint) -> GLboolean;
    pub fn glLightModelf(pname: GLenum, param: GLfloat);
    pub fn glLightModelfv(pname: GLenum, params: *const GLfloat);
    pub fn glLightModeli(pname: GLenum, param: GLint);
    pub fn glLightModeliv(pname: GLenum, params: *const GLint);
    pub fn glLightf(light: GLenum, pname: GLenum, param: GLfloat);
    pub fn glLightfv(light: GLenum, pname: GLenum, params: *const GLfloat);
    pub fn glLighti(light: GLenum, pname: GLenum, param: GLint);
    pub fn glLightiv(light: GLenum, pname: GLenum, params: *const GLint);
    pub fn glLineStipple(factor: GLint, pattern: GLushort);
    pub fn glLineWidth(width: GLfloat);
    pub fn glListBase(base: GLuint);
    pub fn glLoadIdentity();
    pub fn glLoadMatrixd(m: *const GLdouble);
    pub fn glLoadMatrixf(m: *const GLfloat);
    pub fn glLoadName(name: GLuint);
    pub fn glLogicOp(opcode: GLenum);
    pub fn glMap1d(target: GLenum, u1: GLdouble, u2: GLdouble, stride: GLint, order: GLint, points: *const GLdouble);
    pub fn glMap1f(target: GLenum, u1: GLfloat, u2: GLfloat, stride: GLint, order: GLint, points: *const GLfloat);
    pub fn glMap2d(target: GLenum, u1: GLdouble, u2: GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: *const GLdouble);
    pub fn glMap2f(target: GLenum, u1: GLfloat, u2: GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: *const GLfloat);
    pub fn glMapGrid1d(un: GLint, u1: GLdouble, u2: GLdouble);
    pub fn glMapGrid1f(un: GLint, u1: GLfloat, u2: GLfloat);
    pub fn glMapGrid2d(un: GLint, u1: GLdouble, u2: GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble);
    pub fn glMapGrid2f(un: GLint, u1: GLfloat, u2: GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat);
    pub fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat);
    pub fn glMaterialfv(face: GLenum, pname: GLenum, params: *const GLfloat);
    pub fn glMateriali(face: GLenum, pname: GLenum, param: GLint);
    pub fn glMaterialiv(face: GLenum, pname: GLenum, params: *const GLint);
    pub fn glMatrixMode(mode: GLenum);
    pub fn glMultMatrixd(m: *const GLdouble);
    pub fn glMultMatrixf(m: *const GLfloat);
    pub fn glNewList(list: GLuint, mode: GLenum);
    pub fn glNormal3b (nx: GLbyte, ny: GLbyte, nz: GLbyte);
    pub fn glNormal3bv(v: *const GLbyte);
    pub fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble);
    pub fn glNormal3dv(v: *const GLdouble);
    pub fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat);
    pub fn glNormal3fv(v: *const GLfloat);
    pub fn glNormal3i(nx: GLint, ny: GLint, nz: GLint);
    pub fn glNormal3iv(v: *const GLint);
    pub fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort);
    pub fn glNormal3sv(v: *const GLshort);
    pub fn glNormalPointer(type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
    pub fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble);
    pub fn glPassThrough(token: GLfloat);
    pub fn glPixelMapfv(map: GLenum, mapsize: GLsizei, values: *const GLfloat);
    pub fn glPixelMapuiv(map: GLenum, mapsize: GLsizei, values: *const GLuint);
    pub fn glPixelMapusv(map: GLenum, mapsize: GLsizei, values: *const GLushort);
    pub fn glPixelStoref(pname: GLenum, param: GLfloat);
    pub fn glPixelStorei(pname: GLenum, param: GLint);
    pub fn glPixelTransferf(pname: GLenum, param: GLfloat);
    pub fn glPixelTransferi(pname: GLenum, param: GLint);
    pub fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat);
    pub fn glPointSize(size: GLfloat);
    pub fn glPolygonMode(face: GLenum, mode: GLenum);
    pub fn glPolygonOffset(factor: GLfloat, units: GLfloat);
    pub fn glPolygonStipple(mask: *const GLubyte);
    pub fn glPopAttrib();
    pub fn glPopClientAttrib();
    pub fn glPopMatrix();
    pub fn glPopName();
    pub fn glPrioritizeTextures(n: GLsizei, textures: *const GLuint, priorities: *const GLclampf);
    pub fn glPushAttrib(mask: GLbitfield);
    pub fn glPushClientAttrib(mask: GLbitfield);
    pub fn glPushMatrix();
    pub fn glPushName(name: GLuint);
    pub fn glRasterPos2d(x: GLdouble, y: GLdouble);
    pub fn glRasterPos2dv(v: *const GLdouble);
    pub fn glRasterPos2f(x: GLfloat, y: GLfloat);
    pub fn glRasterPos2fv(v: *const GLfloat);
    pub fn glRasterPos2i(x: GLint, y: GLint);
    pub fn glRasterPos2iv(v: *const GLint);
    pub fn glRasterPos2s(x: GLshort, y: GLshort);
    pub fn glRasterPos2sv(v: *const GLshort);
    pub fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble);
    pub fn glRasterPos3dv(v: *const GLdouble);
    pub fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat);
    pub fn glRasterPos3fv(v: *const GLfloat);
    pub fn glRasterPos3i(x: GLint, y: GLint, z: GLint);
    pub fn glRasterPos3iv(v: *const GLint);
    pub fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort);
    pub fn glRasterPos3sv(v: *const GLshort);
    pub fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
    pub fn glRasterPos4dv(v: *const GLdouble);
    pub fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
    pub fn glRasterPos4fv(v: *const GLfloat);
    pub fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint);
    pub fn glRasterPos4iv(v: *const GLint);
    pub fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort);
    pub fn glRasterPos4sv(v: *const GLshort);
    pub fn glReadBuffer(mode: GLenum);
    pub fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *mut GLvoid);
    pub fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble);
    pub fn glRectdv(v1: *const GLdouble, v2: *const GLdouble);
    pub fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat);
    pub fn glRectfv(v1: *const GLfloat, v2: *const GLfloat);
    pub fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint);
    pub fn glRectiv(v1: *const GLint, v2: *const GLint);
    pub fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort);
    pub fn glRectsv(v1: *const GLshort, v2: *const GLshort);
    pub fn glRenderMode(mode: GLenum) -> GLint;
    pub fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble);
    pub fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat);
    pub fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble);
    pub fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat);
    pub fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
    pub fn glSelectBuffer(size: GLsizei, buffer: *mut GLuint);
    pub fn glShadeModel(mode: GLenum);
    pub fn glStencilFunc(func: GLenum, ref_: GLint, mask: GLuint);
    pub fn glStencilMask(mask: GLuint);
    pub fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum);
    pub fn glTexCoord1d(s: GLdouble);
    pub fn glTexCoord1dv(v: *const GLdouble);
    pub fn glTexCoord1f(s: GLfloat);
    pub fn glTexCoord1fv(v: *const GLfloat);
    pub fn glTexCoord1i(s: GLint);
    pub fn glTexCoord1iv(v: *const GLint);
    pub fn glTexCoord1s(s: GLshort);
    pub fn glTexCoord1sv(v: *const GLshort);
    pub fn glTexCoord2d(s: GLdouble, t: GLdouble);
    pub fn glTexCoord2dv(v: *const GLdouble);
    pub fn glTexCoord2f(s: GLfloat, t: GLfloat);
    pub fn glTexCoord2fv(v: *const GLfloat);
    pub fn glTexCoord2i(s: GLint, t: GLint);
    pub fn glTexCoord2iv(v: *const GLint);
    pub fn glTexCoord2s(s: GLshort, t: GLshort);
    pub fn glTexCoord2sv(v: *const GLshort);
    pub fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble);
    pub fn glTexCoord3dv(v: *const GLdouble);
    pub fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat);
    pub fn glTexCoord3fv(v: *const GLfloat);
    pub fn glTexCoord3i(s: GLint, t: GLint, r: GLint);
    pub fn glTexCoord3iv(v: *const GLint);
    pub fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort);
    pub fn glTexCoord3sv(v: *const GLshort);
    pub fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble);
    pub fn glTexCoord4dv(v: *const GLdouble);
    pub fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat);
    pub fn glTexCoord4fv(v: *const GLfloat);
    pub fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint);
    pub fn glTexCoord4iv(v: *const GLint);
    pub fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort);
    pub fn glTexCoord4sv(v: *const GLshort);
    pub fn glTexCoordPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
    pub fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat);
    pub fn glTexEnvfv(target: GLenum, pname: GLenum, params: *const GLfloat);
    pub fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint);
    pub fn glTexEnviv(target: GLenum, pname: GLenum, params: *const GLint);
    pub fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble);
    pub fn glTexGendv(coord: GLenum, pname: GLenum, params: *const GLdouble);
    pub fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat);
    pub fn glTexGenfv(coord: GLenum, pname: GLenum, params: *const GLfloat);
    pub fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint);
    pub fn glTexGeniv(coord: GLenum, pname: GLenum, params: *const GLint);
    pub fn glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const GLvoid);
    pub fn glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type_: GLenum, pixels: *const GLvoid);
    pub fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat);
    pub fn glTexParameterfv(target: GLenum, pname: GLenum, params: *const GLfloat);
    pub fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint);
    pub fn glTexParameteriv(target: GLenum, pname: GLenum, params: *const GLint);
    pub fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, type_: GLenum, pixels: *const GLvoid);
    pub fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type_: GLenum, pixels: *const GLvoid);
    pub fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble);
    pub fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat);
    pub fn glVertex2d(x: GLdouble, y: GLdouble);
    pub fn glVertex2dv(v: *const GLdouble);
    pub fn glVertex2f(x: GLfloat, y: GLfloat);
    pub fn glVertex2fv(v: *const GLfloat);
    pub fn glVertex2i(x: GLint, y: GLint);
    pub fn glVertex2iv(v: *const GLint);
    pub fn glVertex2s(x: GLshort, y: GLshort);
    pub fn glVertex2sv(v: *const GLshort);
    pub fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble);
    pub fn glVertex3dv(v: *const GLdouble);
    pub fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat);
    pub fn glVertex3fv(v: *const GLfloat);
    pub fn glVertex3i(x: GLint, y: GLint, z: GLint);
    pub fn glVertex3iv(v: *const GLint);
    pub fn glVertex3s(x: GLshort, y: GLshort, z: GLshort);
    pub fn glVertex3sv(v: *const GLshort);
    pub fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble);
    pub fn glVertex4dv(v: *const GLdouble);
    pub fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat);
    pub fn glVertex4fv(v: *const GLfloat);
    pub fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint);
    pub fn glVertex4iv(v: *const GLint);
    pub fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort);
    pub fn glVertex4sv(v: *const GLshort);
    pub fn glVertexPointer(size: GLint, type_: GLenum, stride: GLsizei, pointer: *const GLvoid);
    pub fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei);
}